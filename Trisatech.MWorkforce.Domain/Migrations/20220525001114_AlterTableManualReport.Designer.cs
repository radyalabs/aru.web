// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Trisatech.MWorkforce.Domain;

#nullable disable

namespace Trisatech.MWorkforce.Domain.Migrations
{
    [DbContext(typeof(MobileForceContext))]
    [Migration("20220525001114_AlterTableManualReport")]
    partial class AlterTableManualReport
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentToken")
                        .HasColumnType("text");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FCMToken")
                        .HasColumnType("text");

                    b.Property<byte>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<byte>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsPushNotifActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLoginDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("AssignmentCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AssignmentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<byte>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<string>("SurveyId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.HasKey("AnswerId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Assignment", b =>
                {
                    b.Property<string>("AssignmentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("AssignmentCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("AssignmentDueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssignmentName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("AssignmentStatusCode")
                        .IsRequired()
                        .HasColumnType("character varying(20)");

                    b.Property<int>("AssignmentType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<byte>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("RefAssigmentCode")
                        .HasColumnType("character varying(6)");

                    b.Property<string>("RefAssignmentCode")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AssignmentStatusCode");

                    b.HasIndex("RefAssigmentCode");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.AssignmentDetail", b =>
                {
                    b.Property<string>("AssignmentDetailId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AssignmentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Attachment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attachment1")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Attachment2")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("AttachmentBlobId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("AttachmentBlobId1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("AttachmentBlobId2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ContactId")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GoogleTime")
                        .HasColumnType("integer");

                    b.Property<byte>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<byte>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<int>("LostTime")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SalesTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("AssignmentDetailId");

                    b.HasIndex("AssignmentId")
                        .IsUnique();

                    b.HasIndex("ContactId");

                    b.HasIndex("UserId");

                    b.ToTable("AssignmentDetails");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.AssignmentGroup", b =>
                {
                    b.Property<string>("AssignmentGroupId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("EndDistance")
                        .HasColumnType("double precision");

                    b.Property<double?>("EndLatitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("EndLongitude")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reserved1")
                        .HasColumnType("text");

                    b.Property<string>("Reserved2")
                        .HasColumnType("text");

                    b.Property<string>("Reserved3")
                        .HasColumnType("text");

                    b.Property<string>("Reserved4")
                        .HasColumnType("text");

                    b.Property<string>("Reserved5")
                        .HasColumnType("text");

                    b.Property<string>("Reserved6")
                        .HasColumnType("text");

                    b.Property<string>("Reserved7")
                        .HasColumnType("text");

                    b.Property<double>("StartDistance")
                        .HasColumnType("double precision");

                    b.Property<double?>("StartLatitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("StartLongitude")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalLostTime")
                        .HasColumnType("integer");

                    b.HasKey("AssignmentGroupId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("AssignmentGroups");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.AssignmentStatus", b =>
                {
                    b.Property<string>("AssignmentStatusCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("AssignmentStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("AssignmentStatusCode");

                    b.ToTable("AssignmentStatuses");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Contact", b =>
                {
                    b.Property<string>("ContactId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("ContactPhoto")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<byte>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SecondaryEmail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ContactId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CustomerCity")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerDistrict")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("text");

                    b.Property<double?>("CustomerLatitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("CustomerLongitude")
                        .HasColumnType("double precision");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerPhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("CustomerPhoto")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CustomerPhotoBlobId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerPhotoId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerPhotoIdBlobId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerPhotoNPWP")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CustomerPhotoNPWPBlobId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerVillage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Desc")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<byte>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.CustomerContactAgent", b =>
                {
                    b.Property<string>("CustomerContactAgentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContactId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<byte>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<string>("SalesId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CustomerContactAgentId");

                    b.ToTable("CustomerContactAgents");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.CustomerDetail", b =>
                {
                    b.Property<int>("CustomerDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerDetailId"));

                    b.Property<string>("BrandAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BrandAge")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("BrandCity")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BrandDistrict")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<double?>("BrandLatitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("BrandLongitude")
                        .HasColumnType("double precision");

                    b.Property<string>("BrandName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BrandPhotoBlobId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BrandPhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BrandPhotoUrl1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BrandStatus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BrandType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BrandVillage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BrandingName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Desc")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Reserved")
                        .HasColumnType("text");

                    b.Property<string>("brandPhoto1BlobId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("CustomerDetailId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerDetails");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Invoice", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("AssignmentCode")
                        .HasColumnType("text");

                    b.Property<string>("AssignmentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvoiceCode")
                        .HasColumnType("text");

                    b.Property<byte>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<byte>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("InvoiceId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.News", b =>
                {
                    b.Property<string>("NewsId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<byte>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsPublish")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("NewsId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AssignmentCode")
                        .HasColumnType("text");

                    b.Property<string>("AssignmentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision");

                    b.Property<byte>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<byte>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<decimal>("ProductAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("OrderId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Otp", b =>
                {
                    b.Property<long>("OtpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OtpId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<DateTime>("ValidTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("OtpId");

                    b.ToTable("Otps");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AssignmentCode")
                        .HasColumnType("text");

                    b.Property<string>("AssignmentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BlobName")
                        .HasColumnType("text");

                    b.Property<decimal>("CashAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("GiroAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("GiroDueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GiroNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("GiroPhoto")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("InvoiceCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<byte>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("PaymentChannel")
                        .HasColumnType("integer");

                    b.Property<decimal>("PaymentDebt")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TransferAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("TransferBank")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("TransferDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PaymentId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<byte>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("ProductImage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ProductModel")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("ProductPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.RefAssigment", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("Desc")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("GroupId")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<byte>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Code");

                    b.ToTable("RefAssigments");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RoleCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.SalesManualReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cash")
                        .HasColumnType("numeric");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Giro")
                        .HasColumnType("numeric");

                    b.Property<decimal>("InvoiceValue")
                        .HasColumnType("numeric");

                    b.Property<byte>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<byte>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<int>("Jenis")
                        .HasColumnType("integer");

                    b.Property<decimal>("Nominal")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SalesCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SalesName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Transfer")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SalesManualReports");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Survey", b =>
                {
                    b.Property<string>("SurveyId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<byte>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SurveyLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SurveyName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SurveyId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Territory", b =>
                {
                    b.Property<string>("TerritoryId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<byte>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TerritoryId");

                    b.ToTable("Territories");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AccountId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<byte>("IsDeleted")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UserPhone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("UserId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.UserActivity", b =>
                {
                    b.Property<long>("UserActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserActivityId"));

                    b.Property<int>("ActivityTypeEnum")
                        .HasColumnType("integer");

                    b.Property<string>("AssignmentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AssignmentStatusCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("UserActivityId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.UserLocation", b =>
                {
                    b.Property<long>("UserLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserLocationId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Reserved1")
                        .HasColumnType("text");

                    b.Property<string>("Reserved2")
                        .HasColumnType("text");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserLocationId");

                    b.ToTable("UserLocations");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.UserLogin", b =>
                {
                    b.Property<long>("UserLoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserLoginId"));

                    b.Property<string>("AccountId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GeneratedToken")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserLoginId");

                    b.HasIndex("AccountId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.UserTerritory", b =>
                {
                    b.Property<int>("UserTerritoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserTerritoryId"));

                    b.Property<string>("TerritoryId")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("character varying(50)");

                    b.HasKey("UserTerritoryId");

                    b.HasIndex("TerritoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTerritories");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Account", b =>
                {
                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Answer", b =>
                {
                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId");

                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.Survey", "Survey")
                        .WithMany("Answer")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Survey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Assignment", b =>
                {
                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.AssignmentStatus", "AssignmentStatus")
                        .WithMany()
                        .HasForeignKey("AssignmentStatusCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.RefAssigment", "RefAssigment")
                        .WithMany()
                        .HasForeignKey("RefAssigmentCode");

                    b.Navigation("AssignmentStatus");

                    b.Navigation("RefAssigment");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.AssignmentDetail", b =>
                {
                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.Assignment", "Assignment")
                        .WithOne("AssignmentDetail")
                        .HasForeignKey("Trisatech.MWorkforce.Domain.Entities.AssignmentDetail", "AssignmentId");

                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Assignment");

                    b.Navigation("Contact");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.AssignmentGroup", b =>
                {
                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Contact", b =>
                {
                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.Customer", "Customer")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.CustomerDetail", b =>
                {
                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.Customer", "Customer")
                        .WithOne("CustomerDetail")
                        .HasForeignKey("Trisatech.MWorkforce.Domain.Entities.CustomerDetail", "CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.Assignment", "Assignment")
                        .WithMany("Invoices")
                        .HasForeignKey("AssignmentId");

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Order", b =>
                {
                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.Assignment", null)
                        .WithMany("Orders")
                        .HasForeignKey("AssignmentId");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.Assignment", "Assignment")
                        .WithMany("Payments")
                        .HasForeignKey("AssignmentId");

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.User", b =>
                {
                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("Trisatech.MWorkforce.Domain.Entities.User", "AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.UserActivity", b =>
                {
                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId");

                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.UserLogin", b =>
                {
                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.UserTerritory", b =>
                {
                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.Territory", "Territory")
                        .WithMany("UserTerritory")
                        .HasForeignKey("TerritoryId");

                    b.HasOne("Trisatech.MWorkforce.Domain.Entities.User", "User")
                        .WithMany("UserTerritory")
                        .HasForeignKey("UserId");

                    b.Navigation("Territory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Account", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Assignment", b =>
                {
                    b.Navigation("AssignmentDetail");

                    b.Navigation("Invoices");

                    b.Navigation("Orders");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("CustomerDetail");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Survey", b =>
                {
                    b.Navigation("Answer");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.Territory", b =>
                {
                    b.Navigation("UserTerritory");
                });

            modelBuilder.Entity("Trisatech.MWorkforce.Domain.Entities.User", b =>
                {
                    b.Navigation("UserTerritory");
                });
#pragma warning restore 612, 618
        }
    }
}
